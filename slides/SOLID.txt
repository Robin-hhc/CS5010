Single Responsibility Principle (SRP): A class should only have one job or responsibility. If a class have more than one responsibility, you should decompose it into some smaller classes, with only one responsibility on each class.Open/Closed Principle (OCP): Open for extension but closed for modification. You should be able to extend new functionality to a system instead of changing the existing code.Liskov Substitution Principle (LSP): Objects of a superclass shall be replaceable with objects of a subclass without affecting the correctness of the program. A subclass should override the parent class methods in a way that does not break the functionality of the superclass methods from a client's point of view.Interface Segregation Principle (ISP): No client should be forced to depend on methods it does not use. Instead, we should use several specific interfaces to keep interfaces small and specific. Therefore, we can ensure that implementing classes do not need to depend on interfaces they do not use.Dependency Inversion Principle (DIP): High-level modules should not depend on low-level modules. Both should depend on abstractions. In detail, abstractions should not depend upon details; details should depend upon abstractions.